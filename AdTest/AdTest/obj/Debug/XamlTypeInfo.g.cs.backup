//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace AdTest
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::AdTest.AdTest_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::AdTest.AdTest_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::AdTest.AdTest_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace AdTest.AdTest_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            if(xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForType(type);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForName(typeName);
            }
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_MyDefaultAd() { return new global::AdTest.MyDefaultAd(); }

        private object Activate_1_AdRotatorControl() { return new global::AdRotatorWin8.AdRotatorControl(); }

        private object Activate_6_MainPage() { return new global::AdTest.MainPage(); }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::AdTest.AdTest_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::AdTest.AdTest_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::AdTest.AdTest_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new global::AdTest.AdTest_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Control));
                break;

            case "Int32":
                xamlType = new global::AdTest.AdTest_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "String":
                xamlType = new global::AdTest.AdTest_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Boolean":
                xamlType = new global::AdTest.AdTest_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Object":
                xamlType = new global::AdTest.AdTest_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::AdTest.AdTest_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "AdTest.MyDefaultAd":
                userType = new global::AdTest.AdTest_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::AdTest.MyDefaultAd), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_MyDefaultAd;
                xamlType = userType;
                break;

            case "AdRotatorWin8.AdRotatorControl":
                userType = new global::AdTest.AdTest_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::AdRotatorWin8.AdRotatorControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_1_AdRotatorControl;
                userType.AddMemberName("AdHeight");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("AdWidth");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("DefaultSettingsFileUri");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("SettingsUrl");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("IsTest");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsInDesignMode");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("DefaultAdType");
                userType.AddMemberName("IsAdRotatorEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsInitialised");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("SlidingAdDirection");
                userType.AddMemberName("SlidingAdDisplaySeconds");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("SlidingAdHiddenSeconds");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("DefaultHouseAdBody");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("DefaultHouseAdURI");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("PubCenterAppId");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("PubCenterAdUnitId");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("AdDuplexAppId");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ApplyIsEnabledFix");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "AdRotator.Model.AdType":
                userType = new global::AdTest.AdTest_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::AdRotator.Model.AdType), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("PubCenter", global::AdRotator.Model.AdType.PubCenter);
                userType.AddEnumValue("AdMob", global::AdRotator.Model.AdType.AdMob);
                userType.AddEnumValue("AdDuplex", global::AdRotator.Model.AdType.AdDuplex);
                userType.AddEnumValue("InnerActive", global::AdRotator.Model.AdType.InnerActive);
                userType.AddEnumValue("MobFox", global::AdRotator.Model.AdType.MobFox);
                userType.AddEnumValue("Smaato", global::AdRotator.Model.AdType.Smaato);
                userType.AddEnumValue("DefaultHouseAd", global::AdRotator.Model.AdType.DefaultHouseAd);
                userType.AddEnumValue("None", global::AdRotator.Model.AdType.None);
                xamlType = userType;
                break;

            case "System.Enum":
                userType = new global::AdTest.AdTest_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Enum), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::AdTest.AdTest_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "AdRotator.Model.SlideDirection":
                userType = new global::AdTest.AdTest_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::AdRotator.Model.SlideDirection), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Top", global::AdRotator.Model.SlideDirection.Top);
                userType.AddEnumValue("Bottom", global::AdRotator.Model.SlideDirection.Bottom);
                userType.AddEnumValue("Left", global::AdRotator.Model.SlideDirection.Left);
                userType.AddEnumValue("Right", global::AdRotator.Model.SlideDirection.Right);
                userType.AddEnumValue("None", global::AdRotator.Model.SlideDirection.None);
                xamlType = userType;
                break;

            case "AdTest.MainPage":
                userType = new global::AdTest.AdTest_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::AdTest.MainPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_6_MainPage;
                xamlType = userType;
                break;

            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.Advertising.WinRT.UI.XamlAdControl_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::AdDuplex.Controls.Windows8SDK_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::AdRotatorWin8.AdRotator_W8_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private object get_0_AdRotatorControl_AdHeight(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.AdHeight;
        }
        private void set_0_AdRotatorControl_AdHeight(object instance, object Value)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            that.AdHeight = (global::System.Int32)Value;
        }
        private object get_1_AdRotatorControl_AdWidth(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.AdWidth;
        }
        private void set_1_AdRotatorControl_AdWidth(object instance, object Value)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            that.AdWidth = (global::System.Int32)Value;
        }
        private object get_2_AdRotatorControl_DefaultSettingsFileUri(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.DefaultSettingsFileUri;
        }
        private void set_2_AdRotatorControl_DefaultSettingsFileUri(object instance, object Value)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            that.DefaultSettingsFileUri = (global::System.String)Value;
        }
        private object get_3_AdRotatorControl_SettingsUrl(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.SettingsUrl;
        }
        private void set_3_AdRotatorControl_SettingsUrl(object instance, object Value)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            that.SettingsUrl = (global::System.String)Value;
        }
        private object get_4_AdRotatorControl_IsTest(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.IsTest;
        }
        private void set_4_AdRotatorControl_IsTest(object instance, object Value)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            that.IsTest = (global::System.Boolean)Value;
        }
        private object get_5_AdRotatorControl_IsInDesignMode(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.IsInDesignMode;
        }
        private object get_6_AdRotatorControl_DefaultAdType(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.DefaultAdType;
        }
        private void set_6_AdRotatorControl_DefaultAdType(object instance, object Value)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            that.DefaultAdType = (global::AdRotator.Model.AdType)Value;
        }
        private object get_7_AdRotatorControl_IsAdRotatorEnabled(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.IsAdRotatorEnabled;
        }
        private void set_7_AdRotatorControl_IsAdRotatorEnabled(object instance, object Value)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            that.IsAdRotatorEnabled = (global::System.Boolean)Value;
        }
        private object get_8_AdRotatorControl_IsInitialised(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.IsInitialised;
        }
        private object get_9_AdRotatorControl_SlidingAdDirection(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.SlidingAdDirection;
        }
        private void set_9_AdRotatorControl_SlidingAdDirection(object instance, object Value)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            that.SlidingAdDirection = (global::AdRotator.Model.SlideDirection)Value;
        }
        private object get_10_AdRotatorControl_SlidingAdDisplaySeconds(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.SlidingAdDisplaySeconds;
        }
        private void set_10_AdRotatorControl_SlidingAdDisplaySeconds(object instance, object Value)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            that.SlidingAdDisplaySeconds = (global::System.Int32)Value;
        }
        private object get_11_AdRotatorControl_SlidingAdHiddenSeconds(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.SlidingAdHiddenSeconds;
        }
        private void set_11_AdRotatorControl_SlidingAdHiddenSeconds(object instance, object Value)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            that.SlidingAdHiddenSeconds = (global::System.Int32)Value;
        }
        private object get_12_AdRotatorControl_DefaultHouseAdBody(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.DefaultHouseAdBody;
        }
        private void set_12_AdRotatorControl_DefaultHouseAdBody(object instance, object Value)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            that.DefaultHouseAdBody = (global::System.String)Value;
        }
        private object get_13_AdRotatorControl_DefaultHouseAdURI(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.DefaultHouseAdURI;
        }
        private void set_13_AdRotatorControl_DefaultHouseAdURI(object instance, object Value)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            that.DefaultHouseAdURI = (global::System.String)Value;
        }
        private object get_14_AdRotatorControl_PubCenterAppId(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.PubCenterAppId;
        }
        private void set_14_AdRotatorControl_PubCenterAppId(object instance, object Value)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            that.PubCenterAppId = (global::System.String)Value;
        }
        private object get_15_AdRotatorControl_PubCenterAdUnitId(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.PubCenterAdUnitId;
        }
        private void set_15_AdRotatorControl_PubCenterAdUnitId(object instance, object Value)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            that.PubCenterAdUnitId = (global::System.String)Value;
        }
        private object get_16_AdRotatorControl_AdDuplexAppId(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.AdDuplexAppId;
        }
        private void set_16_AdRotatorControl_AdDuplexAppId(object instance, object Value)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            that.AdDuplexAppId = (global::System.String)Value;
        }
        private object get_17_AdRotatorControl_ApplyIsEnabledFix(object instance)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            return that.ApplyIsEnabledFix;
        }
        private void set_17_AdRotatorControl_ApplyIsEnabledFix(object instance, object Value)
        {
            var that = (global::AdRotatorWin8.AdRotatorControl)instance;
            that.ApplyIsEnabledFix = (global::System.Boolean)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::AdTest.AdTest_XamlTypeInfo.XamlMember xamlMember = null;
            global::AdTest.AdTest_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "AdRotatorWin8.AdRotatorControl.AdHeight":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "AdHeight", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_AdRotatorControl_AdHeight;
                xamlMember.Setter = set_0_AdRotatorControl_AdHeight;
                break;
            case "AdRotatorWin8.AdRotatorControl.AdWidth":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "AdWidth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_AdRotatorControl_AdWidth;
                xamlMember.Setter = set_1_AdRotatorControl_AdWidth;
                break;
            case "AdRotatorWin8.AdRotatorControl.DefaultSettingsFileUri":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "DefaultSettingsFileUri", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_AdRotatorControl_DefaultSettingsFileUri;
                xamlMember.Setter = set_2_AdRotatorControl_DefaultSettingsFileUri;
                break;
            case "AdRotatorWin8.AdRotatorControl.SettingsUrl":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "SettingsUrl", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_AdRotatorControl_SettingsUrl;
                xamlMember.Setter = set_3_AdRotatorControl_SettingsUrl;
                break;
            case "AdRotatorWin8.AdRotatorControl.IsTest":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "IsTest", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_AdRotatorControl_IsTest;
                xamlMember.Setter = set_4_AdRotatorControl_IsTest;
                break;
            case "AdRotatorWin8.AdRotatorControl.IsInDesignMode":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "IsInDesignMode", "Boolean");
                xamlMember.Getter = get_5_AdRotatorControl_IsInDesignMode;
                xamlMember.SetIsReadOnly();
                break;
            case "AdRotatorWin8.AdRotatorControl.DefaultAdType":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "DefaultAdType", "AdRotator.Model.AdType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_AdRotatorControl_DefaultAdType;
                xamlMember.Setter = set_6_AdRotatorControl_DefaultAdType;
                break;
            case "AdRotatorWin8.AdRotatorControl.IsAdRotatorEnabled":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "IsAdRotatorEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_AdRotatorControl_IsAdRotatorEnabled;
                xamlMember.Setter = set_7_AdRotatorControl_IsAdRotatorEnabled;
                break;
            case "AdRotatorWin8.AdRotatorControl.IsInitialised":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "IsInitialised", "Boolean");
                xamlMember.Getter = get_8_AdRotatorControl_IsInitialised;
                xamlMember.SetIsReadOnly();
                break;
            case "AdRotatorWin8.AdRotatorControl.SlidingAdDirection":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "SlidingAdDirection", "AdRotator.Model.SlideDirection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_AdRotatorControl_SlidingAdDirection;
                xamlMember.Setter = set_9_AdRotatorControl_SlidingAdDirection;
                break;
            case "AdRotatorWin8.AdRotatorControl.SlidingAdDisplaySeconds":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "SlidingAdDisplaySeconds", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_AdRotatorControl_SlidingAdDisplaySeconds;
                xamlMember.Setter = set_10_AdRotatorControl_SlidingAdDisplaySeconds;
                break;
            case "AdRotatorWin8.AdRotatorControl.SlidingAdHiddenSeconds":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "SlidingAdHiddenSeconds", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_AdRotatorControl_SlidingAdHiddenSeconds;
                xamlMember.Setter = set_11_AdRotatorControl_SlidingAdHiddenSeconds;
                break;
            case "AdRotatorWin8.AdRotatorControl.DefaultHouseAdBody":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "DefaultHouseAdBody", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_AdRotatorControl_DefaultHouseAdBody;
                xamlMember.Setter = set_12_AdRotatorControl_DefaultHouseAdBody;
                break;
            case "AdRotatorWin8.AdRotatorControl.DefaultHouseAdURI":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "DefaultHouseAdURI", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_AdRotatorControl_DefaultHouseAdURI;
                xamlMember.Setter = set_13_AdRotatorControl_DefaultHouseAdURI;
                break;
            case "AdRotatorWin8.AdRotatorControl.PubCenterAppId":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "PubCenterAppId", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_AdRotatorControl_PubCenterAppId;
                xamlMember.Setter = set_14_AdRotatorControl_PubCenterAppId;
                break;
            case "AdRotatorWin8.AdRotatorControl.PubCenterAdUnitId":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "PubCenterAdUnitId", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_AdRotatorControl_PubCenterAdUnitId;
                xamlMember.Setter = set_15_AdRotatorControl_PubCenterAdUnitId;
                break;
            case "AdRotatorWin8.AdRotatorControl.AdDuplexAppId":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "AdDuplexAppId", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_AdRotatorControl_AdDuplexAppId;
                xamlMember.Setter = set_16_AdRotatorControl_AdDuplexAppId;
                break;
            case "AdRotatorWin8.AdRotatorControl.ApplyIsEnabledFix":
                userType = (global::AdTest.AdTest_XamlTypeInfo.XamlUserType)GetXamlTypeByName("AdRotatorWin8.AdRotatorControl");
                xamlMember = new global::AdTest.AdTest_XamlTypeInfo.XamlMember(this, "ApplyIsEnabledFix", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_AdRotatorControl_ApplyIsEnabledFix;
                xamlMember.Setter = set_17_AdRotatorControl_ApplyIsEnabledFix;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::AdTest.AdTest_XamlTypeInfo.XamlSystemBaseType
    {
        global::AdTest.AdTest_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::AdTest.AdTest_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::AdTest.AdTest_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::AdTest.AdTest_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


